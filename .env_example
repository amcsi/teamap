# This is an example environment configuration file.  You can create your own
# .env implementation or even just set these values directly on the environment
# via your CI server for example. You can also decide to supply some of your
# environment variables from a .env file, and others via the command line or
# host environment.  This allows you to easily store "safe" environment variables
# within this file, and then manage your more sensitive environment variables
# seperately.
#
# These keys will be used by the webpack configuration. Specifically webpack
# parses the code and will replace any "process.env.{VAR_NAME}" instances with
# the matching value from your vars below.  Please see the webpack config for
# more details

################################################################################
# IMPORTANT! IMPORTANT! IMPORTANT!
#
# Any environment variables identifiers that you add here MUST also be added to
# the .env_whitelist file.  This is so that can safely merge them with any
# cli/host environment variables.
#
# Please see the .env_whitelist file, which will have all the keys below
# listed within it.
################################################################################

# The port on which to run our server.
SERVER_PORT=1337

# The port on which to run our client bundle dev server.
CLIENT_DEVSERVER_PORT=7331

# Disable SSR?
DISABLE_SSR=false

# Where should we output our bundles? (relative to project root)
BUNDLE_OUTPUT_PATH=./build

# What should we name the file that contains details of all the files contained
# within our bundles?
BUNDLE_ASSETS_FILENAME=assets.json

# What is the public http path at which we will serve our client bundle from?
CLIENT_BUNDLE_HTTP_PATH=/client/

# How long should we set the browser cache for the client bundle assets?  Don't
# worry, we add hashes to the files, so if they change the new files will be
# served to browsers.
# We are using the "ms" format to set the length.
# @see https://www.npmjs.com/package/ms
CLIENT_BUNDLE_CACHE_MAXAGE=365d

# Use a development vendor DLL? This improves webpack build performance which
# leads to an overall improved developer experience.  However, they may be a
# case in which you want all the vendor DLLs bundled with your main client bundle.
USE_DEV_DLL=true

# It is also possible that certain vendor DLLs require specific webpack related
# features (e.g. CSS/SASS etc).  For these cases you don't want to include them
# in the vendor dll, which has a very simple webpack configuration. To ensure
# that the respective bundles are always compiled with your main client bundle
# then add them to the property below.  You can add multiple items, comma
# seperated.
# DEV_DLL_IGNORES=react-toolbox
